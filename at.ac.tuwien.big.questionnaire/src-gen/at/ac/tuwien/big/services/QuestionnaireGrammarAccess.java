/*
* generated by Xtext
*/
package at.ac.tuwien.big.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QuestionnaireGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Questionnaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGroupsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGroupsGroupParserRuleCall_3_0 = (RuleCall)cGroupsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cGroupsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cGroupsGroupParserRuleCall_4_1_0 = (RuleCall)cGroupsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Questionnaire:
		//	"questionnaire" name=STRING "[" groups+=Group ("," groups+=Group)* "]";
		public ParserRule getRule() { return rule; }

		//"questionnaire" name=STRING "[" groups+=Group ("," groups+=Group)* "]"
		public Group getGroup() { return cGroup; }

		//"questionnaire"
		public Keyword getQuestionnaireKeyword_0() { return cQuestionnaireKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//groups+=Group
		public Assignment getGroupsAssignment_3() { return cGroupsAssignment_3; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_3_0() { return cGroupsGroupParserRuleCall_3_0; }

		//("," groups+=Group)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//groups+=Group
		public Assignment getGroupsAssignment_4_1() { return cGroupsAssignment_4_1; }

		//Group
		public RuleCall getGroupsGroupParserRuleCall_4_1_0() { return cGroupsGroupParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQuestionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQuestionsQuestionParserRuleCall_3_0 = (RuleCall)cQuestionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQuestionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQuestionsQuestionParserRuleCall_4_1_0 = (RuleCall)cQuestionsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Group:
		//	"group" name=STRING "[" questions+=Question ("," questions+=Question)* "]";
		public ParserRule getRule() { return rule; }

		//"group" name=STRING "[" questions+=Question ("," questions+=Question)* "]"
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//questions+=Question
		public Assignment getQuestionsAssignment_3() { return cQuestionsAssignment_3; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_3_0() { return cQuestionsQuestionParserRuleCall_3_0; }

		//("," questions+=Question)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//questions+=Question
		public Assignment getQuestionsAssignment_4_1() { return cQuestionsAssignment_4_1; }

		//Question
		public RuleCall getQuestionsQuestionParserRuleCall_4_1_0() { return cQuestionsQuestionParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpenQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClosedQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLikertQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// * Questions * / Question:
		//	OpenQuestion | ClosedQuestion | LikertQuestion;
		public ParserRule getRule() { return rule; }

		//OpenQuestion | ClosedQuestion | LikertQuestion
		public Alternatives getAlternatives() { return cAlternatives; }

		//OpenQuestion
		public RuleCall getOpenQuestionParserRuleCall_0() { return cOpenQuestionParserRuleCall_0; }

		//ClosedQuestion
		public RuleCall getClosedQuestionParserRuleCall_1() { return cClosedQuestionParserRuleCall_1; }

		//LikertQuestion
		public RuleCall getLikertQuestionParserRuleCall_2() { return cLikertQuestionParserRuleCall_2; }
	}

	public class OpenQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpenQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cMandatoryKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cMultilineKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cOpenQuestionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OpenQuestion:
		//	("mandatory" | "multiline")? "open question" name=STRING;
		public ParserRule getRule() { return rule; }

		//("mandatory" | "multiline")? "open question" name=STRING
		public Group getGroup() { return cGroup; }

		//("mandatory" | "multiline")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"mandatory"
		public Keyword getMandatoryKeyword_0_0() { return cMandatoryKeyword_0_0; }

		//"multiline"
		public Keyword getMultilineKeyword_0_1() { return cMultilineKeyword_0_1; }

		//"open question"
		public Keyword getOpenQuestionKeyword_1() { return cOpenQuestionKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }
	}

	public class ClosedQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosedQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClosedQuestionAllowingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSingleAnswerKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cMultipleAnswersKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAnswersKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswersAnswerParserRuleCall_5_0 = (RuleCall)cAnswersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAnswersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAnswersAnswerParserRuleCall_6_1_0 = (RuleCall)cAnswersAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDefaultAnswerIsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDefaultAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cDefaultAnswerCrossReference_8_1_0 = (CrossReference)cDefaultAssignment_8_1.eContents().get(0);
		private final RuleCall cDefaultAnswerSTRINGTerminalRuleCall_8_1_0_1 = (RuleCall)cDefaultAnswerCrossReference_8_1_0.eContents().get(1);
		
		//ClosedQuestion:
		//	"closed question allowing" ("single answer" | "multiple answers") name=STRING "answers" "[" answers+=Answer (","
		//	answers+=Answer)* "]" ("default answer is" default=[Answer|STRING])?;
		public ParserRule getRule() { return rule; }

		//"closed question allowing" ("single answer" | "multiple answers") name=STRING "answers" "[" answers+=Answer (","
		//answers+=Answer)* "]" ("default answer is" default=[Answer|STRING])?
		public Group getGroup() { return cGroup; }

		//"closed question allowing"
		public Keyword getClosedQuestionAllowingKeyword_0() { return cClosedQuestionAllowingKeyword_0; }

		//"single answer" | "multiple answers"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"single answer"
		public Keyword getSingleAnswerKeyword_1_0() { return cSingleAnswerKeyword_1_0; }

		//"multiple answers"
		public Keyword getMultipleAnswersKeyword_1_1() { return cMultipleAnswersKeyword_1_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//"answers"
		public Keyword getAnswersKeyword_3() { return cAnswersKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//answers+=Answer
		public Assignment getAnswersAssignment_5() { return cAnswersAssignment_5; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_5_0() { return cAnswersAnswerParserRuleCall_5_0; }

		//("," answers+=Answer)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//answers+=Answer
		public Assignment getAnswersAssignment_6_1() { return cAnswersAssignment_6_1; }

		//Answer
		public RuleCall getAnswersAnswerParserRuleCall_6_1_0() { return cAnswersAnswerParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }

		//("default answer is" default=[Answer|STRING])?
		public Group getGroup_8() { return cGroup_8; }

		//"default answer is"
		public Keyword getDefaultAnswerIsKeyword_8_0() { return cDefaultAnswerIsKeyword_8_0; }

		//default=[Answer|STRING]
		public Assignment getDefaultAssignment_8_1() { return cDefaultAssignment_8_1; }

		//[Answer|STRING]
		public CrossReference getDefaultAnswerCrossReference_8_1_0() { return cDefaultAnswerCrossReference_8_1_0; }

		//STRING
		public RuleCall getDefaultAnswerSTRINGTerminalRuleCall_8_1_0_1() { return cDefaultAnswerSTRINGTerminalRuleCall_8_1_0_1; }
	}

	public class LikertQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LikertQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLikertQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFromSINTParserRuleCall_3_0 = (RuleCall)cFromAssignment_3.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cToSINTParserRuleCall_5_0 = (RuleCall)cToAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//LikertQuestion:
		//	"likert question" name=STRING "(" from=SINT ".." to=SINT ")";
		public ParserRule getRule() { return rule; }

		//"likert question" name=STRING "(" from=SINT ".." to=SINT ")"
		public Group getGroup() { return cGroup; }

		//"likert question"
		public Keyword getLikertQuestionKeyword_0() { return cLikertQuestionKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//from=SINT
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }

		//SINT
		public RuleCall getFromSINTParserRuleCall_3_0() { return cFromSINTParserRuleCall_3_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_4() { return cFullStopFullStopKeyword_4; }

		//to=SINT
		public Assignment getToAssignment_5() { return cToAssignment_5; }

		//SINT
		public RuleCall getToSINTParserRuleCall_5_0() { return cToSINTParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleAnswerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputAnswerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * Answers * / Answer:
		//	SimpleAnswer | InputAnswer;
		public ParserRule getRule() { return rule; }

		//SimpleAnswer | InputAnswer
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleAnswer
		public RuleCall getSimpleAnswerParserRuleCall_0() { return cSimpleAnswerParserRuleCall_0; }

		//InputAnswer
		public RuleCall getInputAnswerParserRuleCall_1() { return cInputAnswerParserRuleCall_1; }
	}

	public class SimpleAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEnablesQuestionKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEnablesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cEnablesQuestionCrossReference_1_2_0 = (CrossReference)cEnablesAssignment_1_2.eContents().get(0);
		private final RuleCall cEnablesQuestionSTRINGTerminalRuleCall_1_2_0_1 = (RuleCall)cEnablesQuestionCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SimpleAnswer:
		//	name=STRING ("enables question" "[" enables=[Question|STRING] "]")?;
		public ParserRule getRule() { return rule; }

		//name=STRING ("enables question" "[" enables=[Question|STRING] "]")?
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//("enables question" "[" enables=[Question|STRING] "]")?
		public Group getGroup_1() { return cGroup_1; }

		//"enables question"
		public Keyword getEnablesQuestionKeyword_1_0() { return cEnablesQuestionKeyword_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//enables=[Question|STRING]
		public Assignment getEnablesAssignment_1_2() { return cEnablesAssignment_1_2; }

		//[Question|STRING]
		public CrossReference getEnablesQuestionCrossReference_1_2_0() { return cEnablesQuestionCrossReference_1_2_0; }

		//STRING
		public RuleCall getEnablesQuestionSTRINGTerminalRuleCall_1_2_0_1() { return cEnablesQuestionSTRINGTerminalRuleCall_1_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class InputAnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputAnswer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//InputAnswer:
		//	name=STRING "...";
		public ParserRule getRule() { return rule; }

		//name=STRING "..."
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//"..."
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
	}

	public class SINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SINT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SINT returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private QuestionnaireElements pQuestionnaire;
	private GroupElements pGroup;
	private QuestionElements pQuestion;
	private OpenQuestionElements pOpenQuestion;
	private ClosedQuestionElements pClosedQuestion;
	private LikertQuestionElements pLikertQuestion;
	private AnswerElements pAnswer;
	private SimpleAnswerElements pSimpleAnswer;
	private InputAnswerElements pInputAnswer;
	private SINTElements pSINT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuestionnaireGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("at.ac.tuwien.big.Questionnaire".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Questionnaire:
	//	"questionnaire" name=STRING "[" groups+=Group ("," groups+=Group)* "]";
	public QuestionnaireElements getQuestionnaireAccess() {
		return (pQuestionnaire != null) ? pQuestionnaire : (pQuestionnaire = new QuestionnaireElements());
	}
	
	public ParserRule getQuestionnaireRule() {
		return getQuestionnaireAccess().getRule();
	}

	//Group:
	//	"group" name=STRING "[" questions+=Question ("," questions+=Question)* "]";
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	/// * Questions * / Question:
	//	OpenQuestion | ClosedQuestion | LikertQuestion;
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//OpenQuestion:
	//	("mandatory" | "multiline")? "open question" name=STRING;
	public OpenQuestionElements getOpenQuestionAccess() {
		return (pOpenQuestion != null) ? pOpenQuestion : (pOpenQuestion = new OpenQuestionElements());
	}
	
	public ParserRule getOpenQuestionRule() {
		return getOpenQuestionAccess().getRule();
	}

	//ClosedQuestion:
	//	"closed question allowing" ("single answer" | "multiple answers") name=STRING "answers" "[" answers+=Answer (","
	//	answers+=Answer)* "]" ("default answer is" default=[Answer|STRING])?;
	public ClosedQuestionElements getClosedQuestionAccess() {
		return (pClosedQuestion != null) ? pClosedQuestion : (pClosedQuestion = new ClosedQuestionElements());
	}
	
	public ParserRule getClosedQuestionRule() {
		return getClosedQuestionAccess().getRule();
	}

	//LikertQuestion:
	//	"likert question" name=STRING "(" from=SINT ".." to=SINT ")";
	public LikertQuestionElements getLikertQuestionAccess() {
		return (pLikertQuestion != null) ? pLikertQuestion : (pLikertQuestion = new LikertQuestionElements());
	}
	
	public ParserRule getLikertQuestionRule() {
		return getLikertQuestionAccess().getRule();
	}

	/// * Answers * / Answer:
	//	SimpleAnswer | InputAnswer;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	//SimpleAnswer:
	//	name=STRING ("enables question" "[" enables=[Question|STRING] "]")?;
	public SimpleAnswerElements getSimpleAnswerAccess() {
		return (pSimpleAnswer != null) ? pSimpleAnswer : (pSimpleAnswer = new SimpleAnswerElements());
	}
	
	public ParserRule getSimpleAnswerRule() {
		return getSimpleAnswerAccess().getRule();
	}

	//InputAnswer:
	//	name=STRING "...";
	public InputAnswerElements getInputAnswerAccess() {
		return (pInputAnswer != null) ? pInputAnswer : (pInputAnswer = new InputAnswerElements());
	}
	
	public ParserRule getInputAnswerRule() {
		return getInputAnswerAccess().getRule();
	}

	//SINT returns ecore::EInt:
	//	"-"? INT;
	public SINTElements getSINTAccess() {
		return (pSINT != null) ? pSINT : (pSINT = new SINTElements());
	}
	
	public ParserRule getSINTRule() {
		return getSINTAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
