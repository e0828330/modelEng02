/**
 * generated by Xtext
 */
package at.ac.tuwien.big.scoping;

import at.ac.tuwien.big.questionnaire.Answer;
import at.ac.tuwien.big.questionnaire.ClosedQuestion;
import at.ac.tuwien.big.questionnaire.Group;
import at.ac.tuwien.big.questionnaire.Question;
import at.ac.tuwien.big.questionnaire.Questionnaire;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.IntegerRange;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it
 */
@SuppressWarnings("all")
public class QuestionnaireScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope getScope(final EObject context, final EReference reference) {
    if ((context instanceof ClosedQuestion)) {
      final ClosedQuestion closedQuestion = ((ClosedQuestion) context);
      EList<Answer> _answers = closedQuestion.getAnswers();
      return Scopes.scopeFor(_answers);
    }
    if ((context instanceof Answer)) {
      final Answer answer = ((Answer) context);
      EObject _eContainer = answer.eContainer();
      EObject _eContainer_1 = _eContainer.eContainer();
      final EList<Question> questions = ((Group) _eContainer_1).getQuestions();
      EObject _eContainer_2 = answer.eContainer();
      final EObject parentGroup = _eContainer_2.eContainer();
      EObject _eContainer_3 = answer.eContainer();
      EObject _eContainer_4 = _eContainer_3.eContainer();
      EObject _eContainer_5 = _eContainer_4.eContainer();
      Questionnaire root = ((Questionnaire) _eContainer_5);
      IScope scope = Scopes.scopeFor(questions);
      EList<Group> _groups = root.getGroups();
      int _size = _groups.size();
      int _minus = (_size - 1);
      IntegerRange _upTo = new IntegerRange(0, _minus);
      for (final Integer i : _upTo) {
        {
          EList<Group> _groups_1 = root.getGroups();
          final Group element = _groups_1.get((i).intValue());
          boolean _equals = element.equals(parentGroup);
          boolean _not = (!_equals);
          if (_not) {
            EList<Question> _questions = ((Group) element).getQuestions();
            IScope _scopeFor = Scopes.scopeFor(_questions, scope);
            scope = _scopeFor;
          }
        }
      }
      return scope;
    }
    return super.getScope(context, reference);
  }
}
