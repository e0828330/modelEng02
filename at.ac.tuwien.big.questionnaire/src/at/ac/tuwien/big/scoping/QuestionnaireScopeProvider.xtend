/*
 * generated by Xtext
 */
package at.ac.tuwien.big.scoping

import at.ac.tuwien.big.questionnaire.Answer
import at.ac.tuwien.big.questionnaire.ClosedQuestion
import at.ac.tuwien.big.questionnaire.Group
import at.ac.tuwien.big.questionnaire.Question
import at.ac.tuwien.big.questionnaire.Questionnaire
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 	
 *
 */
class QuestionnaireScopeProvider extends AbstractDeclarativeScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (context instanceof ClosedQuestion) {
			val closedQuestion = context as ClosedQuestion
			return Scopes.scopeFor(closedQuestion.answers)
		}

		if (context instanceof Answer) {
			val answer = context as Answer
			var EList<Question> questions = (answer.eContainer.eContainer as Group).questions
			val parentGroup = answer.eContainer.eContainer
			var root = answer.eContainer.eContainer.eContainer as Questionnaire

			var scope = Scopes.scopeFor(questions)

			for(Integer i: 0..(root.groups.size - 1)) {
				val element = root.groups.get(i)
				if (!element.equals(parentGroup)) {				
					scope = Scopes.scopeFor((element as Group).questions, scope)
				}
			}
			
			return scope
		}
	
		return super.getScope(context, reference)
	}
}
