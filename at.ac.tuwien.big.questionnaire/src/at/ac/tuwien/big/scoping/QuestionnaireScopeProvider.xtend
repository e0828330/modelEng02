/*
 * generated by Xtext
 */
package at.ac.tuwien.big.scoping

import at.ac.tuwien.big.questionnaire.Answer
import at.ac.tuwien.big.questionnaire.ClosedQuestion
import at.ac.tuwien.big.questionnaire.Group
import at.ac.tuwien.big.questionnaire.Question
import at.ac.tuwien.big.questionnaire.Questionnaire
import org.eclipse.emf.common.util.EList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 	
 *
 */
class QuestionnaireScopeProvider extends AbstractDeclarativeScopeProvider {

	override getScope(EObject context, EReference reference) {
		if (context instanceof ClosedQuestion) {
			val closedQuestion = context as ClosedQuestion
			return Scopes.scopeFor(closedQuestion.answers)
		}

		if (context instanceof Answer) {
			val answer = context as Answer
			val EList<Question> questions = (answer.eContainer.eContainer as Group).questions
			val parentGroup = answer.eContainer.eContainer
			var root = answer.eContainer.eContainer.eContainer as Questionnaire
			root.groups.forEach[element , index |
				if (!element.equals(parentGroup)) {
					/*
					 * TODO:
					 * ... causes random exception "Update Editor State"
					 * when loading a new file ... makes no sense 
					 * => MARTIN FIX !!!!
					 */
					
					//questions+=(element as Group).questions 
				}
			]
			return Scopes.scopeFor(questions)
		}
	
		return super.getScope(context, reference)
	}
}
